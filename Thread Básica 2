class MinhaRunnable2 implements Runnable{
    private String nome;
    private long tempo;
	
    public MinhaRunnable2(String n,long t) { //segunda forma de usar uma Thread é implementando-a através 
   //da interface 'Runnable'
    	this.nome=n;
    	this.tempo=t; 
    }

	@Override
	public void run() { //o método 'run' é o corpo da Thread
		   try {
			   for(int j=0;j<6;j++) {
				   System.out.println(nome+" contador-> "+j);
				   Thread.sleep(tempo);
			   }
			    
		   }catch(InterruptedException e) {
			   e.printStackTrace();
		   }	 
		   System.out.println(nome+" encerrando... ");
		 }
    
	public static void main(String[] args) throws Exception{
		//segunda forma de iniciar uma Thread pelo método main:
		
		MinhaRunnable2 mr7 =new MinhaRunnable2("Thread #7", 500);
		MinhaRunnable2 mr8 =new MinhaRunnable2("Thread #8", 500);
		MinhaRunnable2 mr9 = new MinhaRunnable2("Thread #9", 500);
		
		Thread t7 = new Thread(mr7); //polimorfismo oculto, pois, a classe Runnable estende Thread!
		Thread t8 = new Thread(mr8);
		Thread t9 = new Thread(mr9);
		
		//t7.setPriority(4) esse método dá prioridade de execuão a Thread com maior número passado ao argumento
		//t8.setPriority(9)
		//t9.setPriority(5)
		
		t7.start();
		t7.join(); //esse método faz com que a thread seja primeiramente terminada para depois voltar
		//para a thread principal que é essa classe, e assim iniciar as threads t8 e t9.
		
		t8.start();
	 //	t8.join();  sem o join() a thread t8 será executada junto à t9
		t9.start();
		
		while(t8.isAlive() || t9.isAlive()) { //esse método retorna true se a thread estiver em execução.
		    Thread.sleep(200);	
		}
		
		System.out.println("Essa mensagem só será exibida depois da execução das threads secundárias(acima)");
	}
}
