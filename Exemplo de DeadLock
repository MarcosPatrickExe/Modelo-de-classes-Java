class DeadLock {
	/*DeadLocks podem ocorrer tanto em threads quanto em processos; eles ocorrem,por exemplo,
	 * quando uma thread quer usar um objeto que já sendo usado por outra thread, e essa outra
	 * quer usar o objeto da primeira. Exemplo: */
		
	@SuppressWarnings("deprecation")
	public static void main(String[] args) {
	final String RECURSO1 = "Recurso #1";
	final String RECURSO2 = "Recurso #2";
		
	    Thread the1 =new Thread() {
			public void run() {
				synchronized(RECURSO1) {
					System.out.println("Thread #1 bloqueou recurso #1 \n");
					
					try {
						Thread.sleep(100);
					}catch(Exception e) {}
					
					System.out.println("Thread #1 acessando o recurso #2 \n");
					synchronized(RECURSO2) {
						System.out.println("Thread #1 bloqueou recurso #2");
					}	
				}
			}
		};
		
		Thread the2 = new Thread() {
			public void run() {
				synchronized(RECURSO2) {
					System.out.println("Thread #2 bloqueou recurso #2 \n");
					
					try { Thread.sleep(100); }catch(Exception e){}
					
					System.out.println("Thread #2 acessando o recurso #1 \n");
					synchronized(RECURSO1) {
						System.out.println("Thread #2 bloqueou recurso #1");
					}
				}
				
			}
		};

	  the1.start();
	  the2.start();
	  
	  //no final, as duas threads irão tentar acessar um recurso uma da outra, isso levando um tempo infinito,
	  //e portanto, você deve cancelar a execução do console manualmente.
	}
}
